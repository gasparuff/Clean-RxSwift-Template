//
//  ___FILENAME___
//  ___PROJECTNAME___
//
//  Created by ___FULLUSERNAME___ on ___DATE___.
//  Copyright (c) ___YEAR___ ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import RxSwift

protocol ___FILEBASENAMEASIDENTIFIER___PresenterInput
{
    var forwardStream: Observable<___FILEBASENAMEASIDENTIFIER___.Response>! { get set }
}

protocol ___FILEBASENAMEASIDENTIFIER___PresenterOutput
{
    var forwardStream: Observable<___FILEBASENAMEASIDENTIFIER___.ViewModel>! { get }
}

class ___FILEBASENAMEASIDENTIFIER___Presenter: ___FILEBASENAMEASIDENTIFIER___PresenterOutput
{
    var input:___FILEBASENAMEASIDENTIFIER___PresenterInput! {
        didSet {
            self.forwardStream = input.forwardStream.flatMap(present).observeOn(MainScheduler.instance)
        }
    }
    
    var forwardStream: Observable<___FILEBASENAMEASIDENTIFIER___.ViewModel>!
    
    // MARK: - Presentation logic
    
    func present(response: ___FILEBASENAMEASIDENTIFIER___.Response)  -> Observable<___FILEBASENAMEASIDENTIFIER___.ViewModel> {
        let viewModel = ___FILEBASENAMEASIDENTIFIER___.ViewModel()
        return Observable.just(viewModel)
    }
}
